# Business-as-usual

:::::::: {.row .lulc}
### Land Use Change

::::::: {.panel-tabset group="dimension"}
#### 2020

::: {.card expandable="true"}
<!-- Map -->

```{=html}
<div class="map-container" id="bau2020">
  <canvas style="width:100%; height:100%; display:block;"></canvas>
  <div class="zoom">
    <button class="out">-</button>
    <button class="in">+</button>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  createInteractiveMap('bau2020', '../../img/lulc.png', 'en'); // 'en' for English, 'de' for German
});
</script>
```
:::

::: {.card expandable="true"}
<!-- Create a bar chart with plotly -->

```{r}
library(plotly)
library(jsonlite)
library(dplyr)

# load json file of perc area
lulc_2020 <- fromJSON("outputs/data/lulc-2020-perc_area.json", flatten = TRUE)

# convert to DF
lulc_2020_df <- data.frame(
  class = unlist(lulc_2020),
  perc_area = as.numeric(names(lulc_2020))
)
row.names(lulc_2020_df) <- NULL

# colour palette
LULC_pal <- list("Urban/amenities" = '#a8aba5', #Urban
            "Static" = "#d1d3cf", #static
            "Open Forest" = "#97d1d5", #Open forest
            "Closed forest" = "#29898f", #closed forest
            "Overgrown/shrubland" = "#bb8a75", #Shrubland
            "Intensive agriculture" =  "#f59f78", #Intensive agriculture
            "Alpine pastures" = "#6ca147", #Alpine pastures
            "Grassland or meadows" = "#c4e0a1", #Grassland
            "Permanent crops" = "#DDCC66", #Permanet crops
            "Glacier" = "#d5f1ff",
            "River" = "#93d0ee",
            "Lake" = "#93d0ee")

#add the colours and clean names to the df in the current order
lulc_2020_df$color <- unlist(LULC_pal)
lulc_2020_df$clean_class <- names(LULC_pal)

# create the plotly bar chart with no labels on the bars and no x axis title or main title
p <- plot_ly(lulc_2020_df, 
             x = ~clean_class, 
             y = ~perc_area, 
             type = 'bar',
             marker = list(color = ~color),
             text = ~paste0(round(perc_area, 2), '%'),
             textposition = 'none') %>%
  layout(
    title = list(text = "% Area of Land Use Classes in 2020"),  
    xaxis = list(title = ""), # remove x-axis title
    yaxis = list(title = "Percentage Area (%)", range = c(0, 100)),
    showlegend = FALSE,
    margin = list(b = 150)      # keep space for long x labels
  )%>%
  config(displayModeBar = FALSE) 
p

```
:::

#### 2060

::: {.card expandable="true"}
<!-- Map -->

```{=html}
<div class="map-container" id="bau2060">
  <canvas style="width:100%; height:100%; display:block;"></canvas>
  <div class="zoom">
    <button class="out">-</button>
    <button class="in">+</button>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  createInteractiveMap('bau2060', '../../img/lulc.png', 'en'); // 'en' for English, 'de' for German
});
</script>
```
:::

::: {.card expandable="true"}
<!-- Create a bar chart with plotly -->

```{r}
library(plotly)
library(jsonlite)
library(dplyr)

# load json file of perc area
lulc_2020 <- fromJSON("outputs/data/lulc-2020-perc_area.json", flatten = TRUE)

# convert to DF
lulc_2020_df <- data.frame(
  class = unlist(lulc_2020),
  perc_area = as.numeric(names(lulc_2020))
)
row.names(lulc_2020_df) <- NULL

# colour palette
LULC_pal <- list("Urban/amenities" = '#a8aba5', #Urban
            "Static" = "#d1d3cf", #static
            "Open Forest" = "#97d1d5", #Open forest
            "Closed forest" = "#29898f", #closed forest
            "Overgrown/shrubland" = "#bb8a75", #Shrubland
            "Intensive agriculture" =  "#f59f78", #Intensive agriculture
            "Alpine pastures" = "#6ca147", #Alpine pastures
            "Grassland or meadows" = "#c4e0a1", #Grassland
            "Permanent crops" = "#DDCC66", #Permanet crops
            "Glacier" = "#d5f1ff",
            "River" = "#93d0ee",
            "Lake" = "#93d0ee")

#add the colours and clean names to the df in the current order
lulc_2020_df$color <- unlist(LULC_pal)
lulc_2020_df$clean_class <- names(LULC_pal)

# create the plotly bar chart with no labels on the bars and no x axis title or main title
p <- plot_ly(lulc_2020_df, 
             x = ~clean_class, 
             y = ~perc_area, 
             type = 'bar',
             marker = list(color = ~color),
             text = ~paste0(round(perc_area, 2), '%'),
             textposition = 'none') %>%
  layout(
    title = list(text = "% Area of Land Use Classes in 2060"),  
    xaxis = list(title = ""), # remove x-axis title
    yaxis = list(title = "Percentage Area (%)", range = c(0, 100)),
    showlegend = FALSE,
    margin = list(b = 150)      # keep space for long x labels
  )%>%
  config(displayModeBar = FALSE) 
p

```
:::

#### Change
:::::::
::::::::

------------------------------------------------------------------------

### Ecosystem Services & Biodiversity

------------------------------------------------------------------------

### Economic impacts

:::::: columns
::: {.column width="30%"}
Ecosystem services influence a wide range of economic sectors, and future changes in these services will affect the Peruvian economy. To assess this impact, we examined the relationships between 8 ecosystem services and 7 economic sectors, using data from the [ENCORE database](https://www.encorenature.org/en), which evaluates sectoral dependencies on ecosystem services. Only the sectors relevant to Peru were included.

-   The spider diagram (right) allows you to explore the overall dependencies. Click on an ecosystem service to highlight it, or double-click to remove it from the diagram.

-   The bar plots (below) provide service-specific details. Use the tabs to switch between ecosystem services, and the drop-down menu to focus on a single economic sector.\
:::

::: {.column width="70%"}
```{r}
#| echo: false
#| warning: false
#| fig-width: 8
#| fig-height: 8
library(dplyr)
library(tidyr)
library(plotly)
# Load ENCORE ES and economic impact for Peru DF from the data folder
peru <- read.csv("outputs/data/peru_diagram_df.csv")

peru$ISIC_cat[peru$ISIC_cat=="Public_admin"] <- "Public Administration"

# Map rating to numeric scale
rating_map <- c("VL" = 1, "L" = 2, "M" = 3, "H" = 4, "VH" = 5)

get_es_summary <- function(es_name, peru_data, all_cats) {
  rating_map <- c("VL" = 1, "L" = 2, "M" = 3, "H" = 4, "VH" = 5)
  
  peru_data %>%
    filter(Ecosystem_Service == es_name) %>%
    mutate(rating_num = rating_map[as.character(rating)]) %>%
    group_by(ISIC_cat) %>%
    summarise(max_rating = max(rating_num, na.rm = TRUE), .groups = "drop") %>%
    mutate(max_rating = ifelse(is.infinite(max_rating), NA, max_rating)) %>%
    right_join(data.frame(ISIC_cat = all_cats), by = "ISIC_cat") %>%
    mutate(max_rating = ifelse(is.na(max_rating), 0, max_rating)) %>%
    arrange(match(ISIC_cat, all_cats)) %>%
    pull(max_rating)
}

# Categories
all_cats <- c("Agriculture", "Mining", "Construction", 
              "Manufacturing", "Public Administration", "Transport", "Services")

# Select ES
selected_es <- c("Habitat_maint","Water_flow_reg", "Rec", "Poll", 
                 "Soil_ret", "Biomass", "Soil_qual", "Spirit_art")

# Collect ratings for each ES
ratings_list <- lapply(selected_es, get_es_summary, peru_data = peru, all_cats = all_cats)

# Build long-format dataframe for plotly
radar_data <- data.frame(
  ISIC_cat = rep(all_cats, times = length(selected_es)),
  Rating = unlist(ratings_list),
  ES = rep(selected_es, each = length(all_cats))
)

# Define nicer labels
es_labels <- c(
  "Habitat_maint" = "Habitat quality",
  "Poll"          = "Pollinator abundance",
  "Biomass"       = "Carbon stored in biomass",
  "Soil_qual"     = "Nutrient retention by landscape",
  "Soil_ret"      = "Sediment retention by landscape",
  "Water_flow_reg"= "Water yield",
  "Rec"           = "Recreation potential",
  "Spirit_art"    = "Emblematic species"
)

# Radar chart
p <- plot_ly(type = 'scatterpolar', mode = 'lines+markers')

for (es in selected_es) {
  df <- radar_data %>% filter(ES == es)
  p <- add_trace(
    p,
    r = df$Rating,
    theta = df$ISIC_cat,
    name = es_labels[es],
    fill = 'toself',
    hovertemplate = paste(
      "Ecosystem Service:", es, "<br>",
      "ISIC category: %{theta}<br>",
      "Rating: %{r}<extra></extra>"
    )
  )
}

p <- layout(
  p,
  polar = list(
    radialaxis = list(
      visible = TRUE,
      range = c(0, 5),
      tickvals = 0:5,
      ticktext = c("No", "VL", "L", "M", "H", "VH"),
      tickfont = list(size = 12)  # font size of radial ticks (numbers)
    ),
    angularaxis = list(
      tickfont = list(size = 10, color = "black", family = "Arial")  # category labels
    )
  ),
  showlegend = TRUE,
  legend = list(
    orientation = "h",   # horizontal legend
    x = 0.5,             # center horizontally
    y = -0.3,            # below the plot
    xanchor = "center",
    yanchor = "top",
    font = list(size = 10),
    tracegroupgap = 0,   # no gaps between items
    itemclick = "toggleothers", # optional: click hides others
    itemdoubleclick = "toggle"  # optional
  )
)

p
```
:::

::: {.panel-tabset group="dimension"}
#### Water Yield

```{r}
#| echo: false
#| warning: false
#| message: false
library(dplyr)
library(stringr)
library(tidyr)
library(plotly)
# Canonical levels and colors
rating_levels <- c("Very low", "Low", "Medium", "High", "Very high")
rating_colors <- c(
  "Very low"  = "#1a9850",
  "Low"       = "#91cf60",
  "Medium"    = "#ffffbf",
  "High"      = "#fc8d59",
  "Very high" = "#d73027"
)

# Pretty labels
es_labels <- c(
  "Habitat_maint" = "Habitat quality",
  "Poll"          = "Pollinator abundance",
  "Biomass"       = "Carbon stored in biomass",
  "Soil_qual"     = "Nutrient retention by landscape",
  "Soil_ret"      = "Sediment retention by landscape",
  "Water_flow_reg"= "Water yield",
  "Rec"           = "Recreation potential",
  "Spirit_art"    = "Emblematic species"
)

# Ecosystem services to plot
selected_es <- c("Habitat_maint","Water_flow_reg", "Rec", "Poll", 
                 "Soil_ret", "Biomass", "Soil_qual", "Spirit_art")

# --- helper to clean and summarise ---
clean_ES_data <- function(df, ES) {
  df %>%
    filter(Ecosystem_Service == ES, !is.na(rating)) %>%
    mutate(
      rating = as.character(rating) |> str_trim(),
      rating = dplyr::recode(rating,
                             "VL" = "Very low", "L" = "Low", "M" = "Medium",
                             "H" = "High", "VH" = "Very high",
                             .default = rating
      ),
      rating = case_when(
        str_to_lower(rating) %in% c("very low","very-low") ~ "Very low",
        str_to_lower(rating) %in% c("low")                 ~ "Low",
        str_to_lower(rating) %in% c("medium","med")        ~ "Medium",
        str_to_lower(rating) %in% c("high")                ~ "High",
        str_to_lower(rating) %in% c("very high","very-high") ~ "Very high",
        TRUE ~ rating
      ),
      rating = factor(rating, levels = rating_levels)
    ) %>%
    filter(!is.na(rating))
}

build_summary <- function(df) {
  df %>%
    mutate(rating = as.character(rating)) %>%
    group_by(rating) %>%
    summarise(
      n_classes   = n(),
      classes_list = paste(sort(ISIC_class), collapse = "<br>"),
      .groups = "drop"
    ) %>%
    tidyr::complete(
      rating = rating_levels,
      fill = list(n_classes = 0, classes_list = "")
    ) %>%
    mutate(rating = factor(rating, levels = rating_levels)) %>%
    arrange(rating)
}

# --- function to build one plot for a given ES ---
make_plot <- function(ES) {
  ES_data <- clean_ES_data(peru, ES)
  
  all_sum <- build_summary(ES_data)
  cats    <- sort(unique(ES_data$ISIC_cat))
  
  cat_summaries <- lapply(cats, function(cat) {
    df <- build_summary(filter(ES_data, ISIC_cat == cat))
    df$ISIC_cat <- cat
    df
  })
  names(cat_summaries) <- cats
  
  # base figure
  p <- plot_ly()
  
  # All categories trace
  p <- add_bars(
    p, data = all_sum,
    x = ~rating, y = ~n_classes,
    text = ~paste0(
      "Category: All<br>",
      "Rating: ", rating, "<br>",
      "# classes: ", n_classes,
      ifelse(classes_list == "", "", paste0("<br><br>", classes_list))
    ),
    hovertemplate = "%{text}<extra></extra>",
    textposition  = "none",
    marker = list(color = unname(rating_colors[as.character(all_sum$rating)])),
    name = "All categories", visible = TRUE
  )
  
  # Per-category traces
  for (cat in cats) {
    df <- cat_summaries[[cat]]
    p <- add_bars(
      p, data = df,
      x = ~rating, y = ~n_classes,
      text = ~paste0(
        "Category: ", ISIC_cat, "<br>",
        "Rating: ", rating, "<br>",
        "# classes: ", n_classes,
        ifelse(classes_list == "", "", paste0("<br><br>", classes_list))
      ),
      hovertemplate = "%{text}<extra></extra>",
      textposition  = "none",
      marker = list(color = unname(rating_colors[as.character(df$rating)])),
      name = cat, visible = FALSE
    )
  }
  
  # Visibility setup
  n_traces   <- 1 + length(cats)
  vis_all    <- c(TRUE, rep(FALSE, length(cats)))
  vis_percat <- lapply(seq_along(cats), function(i) { v <- rep(FALSE, n_traces); v[i+1] <- TRUE; v })
  
  ymax_all <- max(all_sum$n_classes, 0)
  ymax_cat <- sapply(cat_summaries, function(df) max(df$n_classes, 0))
  
  buttons <- c(
    list(list(
      method = "update",
      label  = "All categories",
      args   = list(
        list(visible = vis_all),
        list(
          title = paste("Dependency on", es_labels[ES], "— All ISIC categories"),
          yaxis = list(range = c(0, max(1, ymax_all) * 1.1))
        )
      )
    )),
    lapply(seq_along(cats), function(i) {
      list(
        method = "update",
        label  = cats[i],
        args   = list(
          list(visible = vis_percat[[i]]),
          list(
            #title = paste("Dependency on", es_labels[ES], "—", cats[i]),
            yaxis = list(range = c(0, max(1, ymax_cat[i]) * 1.1))
          )
        )
      )
    })
  )
  
  p <- layout(
    p,
    barmode = "group",
    #title   = paste("Dependency on", es_labels[ES], "— All ISIC categories"),
    xaxis   = list(title = "Dependency rating"),
    yaxis   = list(title = "Number of ISIC classes"),
    showlegend = FALSE,
    updatemenus = list(list(
      type = "dropdown", y = 1.15, x = 0, showactive = TRUE, buttons = buttons
    ))
  )
  
  if (max(all_sum$n_classes) == 0) {
    p <- p %>% layout(
      annotations = list(list(
        x = 0.5, y = 0.5, xref = "paper", yref = "paper",
        text = "No ISIC classes with non-NA ratings for this ES",
        showarrow = FALSE
      ))
    )
  }
  
  return(p)
}

# --- generate plots for all selected services ---
plots <- lapply(selected_es, make_plot)
names(plots) <- selected_es

plots[["Water_flow_reg"]]  # show water yield

```

#### Pollinator Abundance

```{r}
#| echo: false
#| warning: false
#| message: false
plots[["Poll"]]            # show pollinator abundance
```

#### Habitat Quality

```{r}
#| echo: false
#| warning: false
#| message: false
plots[["Habitat_maint"]]  # show Habitat quality 
```

#### Recreation Potential

```{r}
#| echo: false
#| warning: false
#| message: false
plots[["Rec"]]            # show Recreation potential
```

#### Sediment Retention

```{r}
#| echo: false
#| warning: false
#| message: false
plots[["Soil_ret"]]       # show Sediment retention 
```

#### Carbon Stored in Biomass

```{r}
#| echo: false
#| warning: false
#| message: false
plots[["Biomass"]]        # show Carbon stored in biomass
```

#### Nutrient Retention

```{r}
#| echo: false
#| warning: false
#| message: false
plots[["Soil_qual"]]      # show Nutrient retention
```

#### Emblematic Species

```{r}
#| echo: false
#| warning: false
#| message: false
plots[["Spirit_art"]]     # show Emblematic species
```
:::
::::::
